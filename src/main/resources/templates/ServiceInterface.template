package ${BasePackageName}.${ClassPackageName};

import java.util.Optional;

$^{DynamicImports}
/**
 * A service for ${LowerCaseName} data management.
 *
 * @author ${AuthorName} (generated)
 */
public interface ${ClassName} {

	/**
	 * Creates a new ${LowerCaseName} for the passed key.
	 * 
	 * @param key The key which the ${LowerCaseName} is to create for.
	 * @return A ${LowerCaseName} key service object for the new ${LowerCaseName}.
	 * @throws IllegalArgumentException     If an invalid key is passed (empty or null).
	 * @throws ObjectAlreadyExistsException If an object is already existing for the passed key.
	 */
	${KeySOClassName} create${CamilCaseName}(String key) throws ObjectAlreadyExistsException;

	/**
	 * Returns the ${LowerCaseName} service object for the passed ${LowerCaseName} key service object.
	 * 
	 * @param key The ${LowerCaseName} key service object which the ${LowerCaseName} is to return for.
	 * @return An optional with the ${LowerCaseName} service object for the passed ${LowerCaseName} key service object.
	 * @throws IllegalArgumentException If an invalid key is passed (empty or null).
	 */
	Optional<${SOClassName}> get${CamilCaseName}(${KeySOClassName} key);

$^{ServiceInterface-SettersCodeBlock}
}